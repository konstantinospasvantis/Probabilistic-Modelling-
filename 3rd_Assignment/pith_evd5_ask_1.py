# -*- coding: utf-8 -*-
"""Pith_Evd5_Ask_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JGLwO3k9aknroahndCthSbvQD4EWvyWM
"""

pip install pybbn

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import networkx as nx
from scipy.io import loadmat
import pandas as pd # for data manipulation 
import networkx as nx # for drawing graphs
import matplotlib.pyplot as plt # for drawing graphs
import pybbn
# for creating Bayesian Belief Networks (BBN)
from pybbn.graph.dag import Bbn
from pybbn.graph.edge import Edge, EdgeType
from pybbn.graph.jointree import EvidenceBuilder
from pybbn.graph.node import BbnNode
from pybbn.graph.variable import Variable
from pybbn.pptc.inferencecontroller import InferenceController
#Reading the file and converting it to a dataframe
printer=loadmat('printer.mat')
A=printer['x']
A[A==1]=0
A[A==2]=1
A=pd.DataFrame(A,index=['Fuse','Drum','Toner','Paper','Roller','Burning','Quality','Wringled','Multiple Pages','Paper Jam'])
print(A.shape)
print(A)

#Create nods, using the table entries
Fuse= BbnNode(Variable(0, 'Fuse', ['=0', '=1']), [12/15,3/15 ])
Drum= BbnNode(Variable(1, 'Drum', ['=0', '=1']), [11/15,4/15 ])
Toner= BbnNode(Variable(2, 'Toner', ['=0', '=1']), [10/15,5/15 ])
Paper= BbnNode(Variable(3, 'Paper', ['=0', '=1']), [7/15,8/15 ])
Roller= BbnNode(Variable(4, 'Roller', ['=0', '=1']), [12/15,3/15 ])
Burning= BbnNode(Variable(5, 'Burning', ['=0', '=1']), [1,0,1/3,2/3 ])
Quality= BbnNode(Variable(6, 'Quality', ['=0', '=1']), [1,0,4/5,1/5,0,1,0,1,0,1,0,1,0,1,0,1])
Wrinkled= BbnNode(Variable(7, 'Wrinkled', ['=0', '=1']), [4/5,1/5,5/7,2/7,1/2,1/2,0,1])
Mult_Pages= BbnNode(Variable(8, 'Mult Pages', ['=0', '=1']), [1,0,1/2,1/2,5/7,2/7,0,1])
Paper_Jam= BbnNode(Variable(9, 'Paper Jam', ['=0', '=1']), [6/10,4/10,0,1,1/2,1/2,1,0])

#Building the Bayesian Belief Network
bbn = Bbn() \
    .add_node(Fuse) \
    .add_node(Drum) \
    .add_node(Toner) \
    .add_node(Paper) \
    .add_node(Roller)\
    .add_node(Burning)\
    .add_node(Quality)\
    .add_node(Wrinkled)\
    .add_node(Mult_Pages)\
    .add_node(Paper_Jam)\
    .add_edge(Edge(Fuse, Burning, EdgeType.DIRECTED)) \
    .add_edge(Edge(Fuse, Wrinkled, EdgeType.DIRECTED)) \
    .add_edge(Edge(Fuse, Paper_Jam, EdgeType.DIRECTED))\
    .add_edge(Edge(Drum, Quality, EdgeType.DIRECTED))\
    .add_edge(Edge(Toner, Quality, EdgeType.DIRECTED))\
    .add_edge(Edge(Paper, Quality, EdgeType.DIRECTED))\
    .add_edge(Edge(Paper, Wrinkled, EdgeType.DIRECTED))\
    .add_edge(Edge(Paper, Mult_Pages, EdgeType.DIRECTED))\
    .add_edge(Edge(Roller, Mult_Pages, EdgeType.DIRECTED))\
    .add_edge(Edge(Roller, Paper_Jam, EdgeType.DIRECTED))
  # convert the BBN to a join tree
join_tree = InferenceController.apply(bbn)
# Set node positions
pos = {0: (-1, 1), 1: (0, 1), 2: (1, 1), 3: (2, 1), 4:(3,1),5:(-1,0), 6:(0,0), 7:(1,0),8:(2,0), 9:(3,0)}
options = {
    "font_size": 16,
    "node_size": 5000,
    "node_color": "white",
    "edgecolors": "blue",
    "edge_color": "black",
    "linewidths": 4,
    "width": 6,}
n, d = bbn.to_nx_graph()
nx.draw(n, with_labels=True, labels=d,pos=pos,**options)
# Update margins and print the graph
ax = plt.gca()
ax.margins(0.10)
plt.axis("on")
plt.show()

def print_probs():
    for node in join_tree.get_bbn_nodes():
        potential = join_tree.get_bbn_potential(node)
        print("Node:", node)
        print("Values:")
        print(potential)
        print('----------------')
        
# Use the above function to print marginal probabilities
print_probs()

# To add evidence of events that happened so probability distribution can be recalculated
def evidence(ev, nod, cat, val):
    ev = EvidenceBuilder() \
    .with_node(join_tree.get_bbn_node_by_name(nod)) \
    .with_evidence(cat, val) \
    .build()
    join_tree.set_observation(ev)
# Use above function to add evidence
evidence('ev1', 'Burning', '=1' , 1.0) #Evidence that there is a burning smell
evidence('ev1', 'Paper Jam', '=1' , 1.0) #Evidence that the paper is jammed
# Print marginal probabilities
print_probs()

#So here we can see that the probability that there is a Fuse Malfunction, given that there is a burning smell and the paper is jammed is 0.83871

#PROBLEM 2#

import math
def Gauss(x,m,sigma):
  f=1/(math.sqrt(2*math.pi)*sigma)*math.exp(-(1/2)*((x-m)/sigma)**2)
  return f 
x_1=[0.5, 0.1, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.35, 0.25]
x_2=[0.9, 0.8, 0.75, 1.0]
m_1=0.26
m_2=0.8625
sigma_1=math.sqrt(0.0149)
sigma_2=math.sqrt(0.0092)
pc_1=10/14
pc_2=4/14
#for the numerator
numerator=(Gauss(0.6,m_1,sigma_1))*(pc_1) 
#for the denominator
denominator=Gauss(0.6,m_1,sigma_1)*pc_1+Gauss(0.6,m_2,sigma_2)*pc_2
print(numerator/denominator)